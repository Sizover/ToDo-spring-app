<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="100" total="101" passed="0" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-09-08T14:16:11 MSK" name="Test Suite" finished-at="2023-09-08T14:16:11 MSK" duration-ms="390">
    <groups>
      <group name="LOCAL">
        <method signature="PlayGround.Черновик2()[pri:0, instance:PlayGround@3d278b4d]" name="Черновик2" class="PlayGround"/>
      </group> <!-- LOCAL -->
    </groups>
    <test started-at="2023-09-08T14:16:11 MSK" name="TEST" finished-at="2023-09-08T14:16:11 MSK" duration-ms="390">
      <class name="PlayGround">
        <test-method is-config="true" signature="cleanVideoList(org.testng.ITestResult)[pri:0, instance:PlayGround@3d278b4d]" started-at="2023-09-08T14:16:11 MSK" name="cleanVideoList" finished-at="2023-09-08T14:16:11 MSK" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=PlayGround.Черновик2()[pri:0, instance:PlayGround@3d278b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanVideoList -->
        <test-method is-config="true" signature="initDriver(java.lang.String)[pri:0, instance:PlayGround@3d278b4d]" started-at="2023-09-08T14:16:11 MSK" name="initDriver" finished-at="2023-09-08T14:16:11 MSK" duration-ms="29" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initDriver -->
        <test-method signature="Черновик2()[pri:0, instance:PlayGround@3d278b4d]" started-at="2023-09-08T14:16:11 MSK" name="Черновик2" finished-at="2023-09-08T14:16:11 MSK" duration-ms="202" status="FAIL">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Invalid 'remote' parameter: ${REMOTE_URL}]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Invalid 'remote' parameter: ${REMOTE_URL}
at com.codeborne.selenide.webdriver.RemoteDriverFactory.create(RemoteDriverFactory.java:29)
at com.codeborne.selenide.webdriver.WebDriverFactory.createWebDriverInstance(WebDriverFactory.java:114)
at com.codeborne.selenide.webdriver.WebDriverFactory.createWebDriver(WebDriverFactory.java:67)
at com.codeborne.selenide.drivercommands.CreateDriverCommand.lambda$createDriver$0(CreateDriverCommand.java:76)
at com.codeborne.selenide.logevents.SelenideLogger.wrap(SelenideLogger.java:133)
at com.codeborne.selenide.logevents.SelenideLogger.get(SelenideLogger.java:113)
at com.codeborne.selenide.drivercommands.CreateDriverCommand.createDriver(CreateDriverCommand.java:52)
at com.codeborne.selenide.impl.WebDriverThreadLocalContainer.createDriver(WebDriverThreadLocalContainer.java:202)
at com.codeborne.selenide.impl.WebDriverThreadLocalContainer.createAndRegisterDriver(WebDriverThreadLocalContainer.java:186)
at com.codeborne.selenide.impl.WebDriverThreadLocalContainer.getAndCheckWebDriver(WebDriverThreadLocalContainer.java:155)
at com.codeborne.selenide.WebDriverRunner.getAndCheckWebDriver(WebDriverRunner.java:130)
at com.codeborne.selenide.impl.StaticDriver.getAndCheckWebDriver(StaticDriver.java:65)
at com.codeborne.selenide.SelenideDriver.getAndCheckWebDriver(SelenideDriver.java:220)
at com.codeborne.selenide.drivercommands.Navigator.lambda$navigateTo$0(Navigator.java:71)
at com.codeborne.selenide.logevents.SelenideLogger.lambda$run$0(SelenideLogger.java:105)
at com.codeborne.selenide.logevents.SelenideLogger.wrap(SelenideLogger.java:133)
at com.codeborne.selenide.logevents.SelenideLogger.run(SelenideLogger.java:104)
at com.codeborne.selenide.drivercommands.Navigator.navigateTo(Navigator.java:69)
at com.codeborne.selenide.drivercommands.Navigator.open(Navigator.java:32)
at com.codeborne.selenide.SelenideDriver.open(SelenideDriver.java:101)
at com.codeborne.selenide.Selenide.open(Selenide.java:53)
at BaseTest.anyLogonTool(BaseTest.kt:300)
at BaseTest.logonTool(BaseTest.kt:289)
at PlayGround.Черновик2(PlayGround.kt:48)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:146)
at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:91)
at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
Caused by: java.net.MalformedURLException: no protocol: ${REMOTE_URL}
at java.base/java.net.URL.<init>(URL.java:674)
at java.base/java.net.URL.<init>(URL.java:569)
at java.base/java.net.URL.<init>(URL.java:516)
at com.codeborne.selenide.webdriver.RemoteDriverFactory.createExecutor(RemoteDriverFactory.java:37)
at com.codeborne.selenide.webdriver.RemoteDriverFactory.create(RemoteDriverFactory.java:23)
... 69 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Черновик2 -->
        <test-method is-config="true" signature="attachVideoAfter(org.testng.ITestResult)[pri:0, instance:PlayGround@3d278b4d]" started-at="2023-09-08T14:16:11 MSK" name="attachVideoAfter" finished-at="2023-09-08T14:16:11 MSK" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Черновик2 status=FAILURE method=PlayGround.Черновик2()[pri:0, instance:PlayGround@3d278b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- attachVideoAfter -->
      </class> <!-- PlayGround -->
      <class name="dicts.CheckingFiles">
        <test-method is-config="true" signature="getAdminLogin(java.lang.String,java.lang.String)[pri:0, instance:dicts.CheckingFiles@7f7af971]" started-at="2023-09-08T14:16:10 MSK" name="getAdminLogin" finished-at="2023-09-08T14:16:11 MSK" duration-ms="33" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[${ADMIN_LOGIN}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${ADMIN_PASSWORD}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAdminLogin -->
        <test-method is-config="true" signature="getAttachSuccess(java.lang.String)[pri:0, instance:dicts.CheckingFiles@7f7af971]" started-at="2023-09-08T14:16:11 MSK" name="getAttachSuccess" finished-at="2023-09-08T14:16:11 MSK" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[${ATTACH_SUCCES}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachSuccess -->
        <test-method is-config="true" signature="getBrowserSetting(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:dicts.CheckingFiles@7f7af971]" started-at="2023-09-08T14:16:11 MSK" name="getBrowserSetting" finished-at="2023-09-08T14:16:11 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[${ATTACH_FOLDER}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${HEADLESS}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[${NO_SANDBOX}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[${DISABLE_GPU}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBrowserSetting -->
        <test-method is-config="true" signature="getMainLogin(java.lang.String,java.lang.String)[pri:0, instance:dicts.CheckingFiles@7f7af971]" started-at="2023-09-08T14:16:11 MSK" name="getMainLogin" finished-at="2023-09-08T14:16:11 MSK" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[${MAIN_LOGIN}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${MAIN_PASSWORD}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMainLogin -->
        <test-method is-config="true" signature="getStandUrl(java.lang.String,java.lang.String)[pri:0, instance:dicts.CheckingFiles@7f7af971]" started-at="2023-09-08T14:16:11 MSK" name="getStandUrl" finished-at="2023-09-08T14:16:11 MSK" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[${URL}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[${REMOTE_URL}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getStandUrl -->
      </class> <!-- dicts.CheckingFiles -->
    </test> <!-- TEST -->
  </suite> <!-- Test Suite -->
</testng-results>
